#+TITLE: AST Exam Solutions
#+AUTHOR: Alexander Sepelenco
#+OPTIONS: toc:nil date:nil ':t *:nil -:nil ::nil <:nil ^:til author:nil d:nil
#+LATEX_HEADER: \usepackage[margin=0.85in]{geometry}
* 2018 Q3
** Part (a)
#+BEGIN_SRC haskell
product []     = 1
product (0:_)  = 0
product (x:xs) = x * product xs
product [10,13,0,42]

product (10:[13,0,42])     = 10 * product [13,0,42] -- third case
10 * product (13:[0,42])   = 10 * (13 * product [0,42]) -- third case
10 * (13 * product (0:[42])) = 10 * (13 * 0) -- second case
#+END_SRC
#+ATTR_LATEX: :width 115mm
[[./product-xs.png]]
* 2018 Q3
** Part (a)
#+BEGIN_SRC haskell
length [] = 0
length (x:xs) 1 + length xs
length [3,39]

length (3:[39])   = 1 + length [39] -- second case
1 + length ([39]) = 1 + (1 + length []) -- second case
1 + (1 length []) = 1 + (1 + 0) -- first case
#+END_SRC
#+ATTR_LATEX: :width 160mm
[[./length-xs.png]]
* 2016 Q3
** Part (b)
#+BEGIN_SRC haskell
prod []     = 1
prod (0:_)  = 0
prod (x:xs) = x * product xs
prod [3,14,0,999]

prod (3:[14,0,999])     = 3 * prod [14,0,999] -- third case
3 * product (13:[0,42]) = 3 * (14 * prod [0,42]) -- third case
3 * (13 * product (0:[42])) = 3 * (14 * 0) -- second case
#+END_SRC
#+ATTR_LATEX: :width 155mm
[[./prod-xs.png]]
* 2015 Q4
** Part (a)
#+BEGIN_SRC haskell
diffsq []     = 0
diffsq (x:xs) = x * x - diffsq xs
diffsq [2,3]

diffsq (2:[3])          = (2 * 2) - diffsq [3] -- second case
(2 * 2) - diffsq (3:[]) = (2 * 2) - ((3 * 3) - diffsq []) -- second case
(2 * 2) - ((3 * 3) - diffsq []) = (2 * 2) - ((3 * 3) - 0) -- first case
#+END_SRC
#+ATTR_LATEX: :width 160mm
[[./diffsq-xs.png]]
* 2014 Q4
** Part (a)
#+BEGIN_SRC haskell
sum []     = 0
sum (x:xs) = x + sum xs
sum [3,39]

sum (3:[39])    = 3 + sum [39] -- second case
3 + sum (39:[]) = 3 + (39 + sum []) -- second case
3 + (39 + sum []) = 3 + (39 + 0) -- first case
#+END_SRC
#+ATTR_LATEX: :width 160mm
[[./sum-xs.png]]
#+LATEX: \newpage
* 2013 Q4
** Notes
- The `sum(x:xs) = x * x + sumsq` example is not entirely correct
  the RHS of that part, should contain the x's and xs
#+BEGIN_SRC txt
+ | @
    | sumsq
    | xs
  | *
    | x
    | x
#+END_SRC
** Part (a)
#+BEGIN_SRC haskell
sumsq []     = 0
sumsq (x:xs) = x * x - diffsq xs
sumsq [2,3]

sumsq (2:[3])          = (2 * 2) + diffsq [3] -- second case
(2 * 2) + sumsq (3:[]) = (2 * 2) + ((3 * 3) + sumsq []) -- second case
(2 * 2) + ((3 * 3) + sumsq []) = (2 * 2) + ((3 * 3) + 0) -- first case
#+END_SRC
#+ATTR_LATEX: :width 130mm
[[./sumsq-xs.png]]
